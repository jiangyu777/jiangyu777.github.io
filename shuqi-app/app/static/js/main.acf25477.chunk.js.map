{"version":3,"sources":["scripts/index.js","scripts/views/index.js","utils/lazyload.js","App.js","serviceWorker.js","index.js"],"names":["MainRouter","basename","component","Layout","React","Component","Index","LazyLoad","className","path","render","to","childContextTypes","history","PropTypes","object","loadingComponent","loader","loading","Loadable","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acf25477.chunk.js","sourcesContent":["\r\n\r\nimport { HashRouter as Hash , Route } from \"react-router-dom\";\r\n\r\nimport {Layout} from \"./views\";\r\n\r\nexport  class  MainRouter  extends   React.Component{\r\n    render(){\r\n        return(\r\n           <Hash\r\n           basename=\"/\"\r\n           >\r\n               <Route component={Layout}></Route>\r\n           </Hash>\r\n        )\r\n    }\r\n}","\r\n\r\n//配置路由\r\n\r\nimport LazyLoad from \"&/lazyload\"\r\n\r\nconst Index = LazyLoad(()=>import(\"./home\"));\r\n\r\nimport {  Route , Switch ,Redirect  } from \"react-router-dom\";\r\n\r\nexport class Layout extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <Switch>\r\n               \r\n                <Route path=\"/index/\" component={Index}></Route>\r\n                <Route path=\"/login\" component={LazyLoad(()=>import(\"./login\"))} />\r\n                <Route path=\"/experience\" component={LazyLoad(()=>import(\"./experience\"))} />\r\n                <Route path=\"/search\" component={LazyLoad(()=>import(\"./search\"))} />\r\n                <Route path=\"/bookcase\" component={LazyLoad(()=>import(\"./bookcase\"))} />\r\n                <Route path=\"/mine\" component={LazyLoad(()=>import(\"./mine\"))} />\r\n                <Route path=\"/consumption\" component={LazyLoad(()=>import(\"./consumption\"))} />\r\n                <Route path=\"/topup\" component={LazyLoad(()=>import(\"./topup\"))} />\r\n                <Route path=\"/classify\" component={LazyLoad(()=>import(\"./classify\"))} />\r\n                <Route path=\"/sorting\" component={LazyLoad(()=>import(\"./sorting\"))} />\r\n                <Route path=\"/boy\" component={LazyLoad(()=>import(\"./boy\"))} />\r\n                <Route path=\"/topup\" component={LazyLoad(()=>import(\"./topup\"))} />\r\n                <Route path=\"/consumption\" component={LazyLoad(()=>import(\"./consumption\"))} />\r\n                <Route path=\"/girl\" component={LazyLoad(()=>import(\"./girl\"))} />\r\n                <Route path=\"/booklist\" component={LazyLoad(()=>import(\"./booklist\"))} />\r\n                <Route path=\"/xianyan\" component={LazyLoad(()=>import(\"./xianyan\"))} />\r\n                <Route path=\"/guyan\" component={LazyLoad(()=>import(\"./guyan\"))} />\r\n                <Route path=\"/huanyan\" component={LazyLoad(()=>import(\"./huanyan\"))} />\r\n                <Route path=\"/xiaoyuan\" component={LazyLoad(()=>import(\"./xiaoyuan\"))} />\r\n                <Route path=\"/dushi\" component={LazyLoad(()=>import(\"./dushi\"))} />\r\n                <Route path=\"/xuanhuan\" component={LazyLoad(()=>import(\"./xuanhuan\"))} />\r\n                <Route path=\"/xianxia\" component={LazyLoad(()=>import(\"./xianxia\"))} />\r\n                <Route path=\"/yiling\" component={LazyLoad(()=>import(\"./yiling\"))} />\r\n                <Route path=\"/lishi\" component={LazyLoad(()=>import(\"./lishi\"))} />\r\n                <Route path=\"/youxi\" component={LazyLoad(()=>import(\"./youxi\"))} />\r\n                <Route path=\"/kehuan\" component={LazyLoad(()=>import(\"./kehuan\"))} />\r\n                <Route path=\"/wuxia\" component={LazyLoad(()=>import(\"./wuxia\"))} />\r\n                <Route path=\"/qihuan\" component={LazyLoad(()=>import(\"./qihuan\"))} />\r\n                <Route path=\"/jingji\" component={LazyLoad(()=>import(\"./jingji\"))} />\r\n                <Route path=\"/qita\" component={LazyLoad(()=>import(\"./qita\"))} />\r\n               \r\n\r\n                <Route path=\"/book/:goodId\" component={LazyLoad(()=>import(\"./book\"))} />\r\n            \r\n            \r\n            \r\n            \r\n            \r\n                <Route path=\"/\"   render={()=>(<Redirect to=\"/index\" />)} />\r\n\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nimport PropTypes from \"prop-types\"\r\nLayout.childContextTypes =  {\r\n    history:PropTypes.object\r\n}","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\n\r\n//通用的过场组件\r\nconst loadingComponent =()=>{\r\n    return (\r\n        <div></div>\r\n    ) \r\n}\r\n\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport default (loader,loading = loadingComponent)=>{\r\n    return Loadable({\r\n        loader,   // 需要懒加载的组件 \r\n        loading\r\n    });\r\n}","import React from 'react';\n\nimport './App.css';\nimport { MainRouter } from \"@/scripts\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n       <MainRouter></MainRouter>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'antd-mobile/dist/antd-mobile.css'; \nimport \"./styles/index.scss\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}